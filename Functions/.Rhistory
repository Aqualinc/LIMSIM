as.yearmon("2007-03-01")
require(zoo)
as.yearmon("2007-03-01")
as.yearmon("2007-03-01")[1]
strplt(as.yearmon("2007-03-01"),sep=" ")
strsplt(as.yearmon("2007-03-01"),sep=" ")
strsplit(as.yearmon("2007-03-01"),sep=" ")
strsplit(as.yearmon("2007-03-01"),split=" ")
strsplit(as.character(as.yearmon("2007-03-01")),split=" ")
strsplit(as.character(as.yearmon("2007-03-01")),split=" ")[[1]][1]
#                                                                                         #
###########################################################################################
rm(list=ls()) # clear memory
require(lattice)
require(latticeExtra)
require(randomForest)
##############################################################
#                   Define directories                       #
##############################################################
rootdir<-"G:/Common Data/R_Scripts"
setwd(rootdir); source("SetDirectories.r"); dir<-SetDirectories(rootdir)
dir$proj<-"G:/ARL Projects/Other/C12056_MSI - Water Wheel/Analysis/Modelling/AnalysiswithR/Datasets"
##############################################################
#                    Load functions                          #
##############################################################
setwd(dir$fun)
source("GeneralFunctions.r")
source("map_REC7.r")
setwd(dir$fun)
source("LIMSIM Functions.R")
source("Flow&AbstractionFunctions.R")
source("WaterQ&PeriphytonFunctions.R")
setwd(dir$fun)
source('FindCatchment.R')
setwd(dir$fun)
source("HabitatFunctions.R")
##############################################################
#            assemble data for a domain                      #
##############################################################
setwd(dir$data)
load("RECdata_plus8.RData")
##############################################################
#            select subset of data                           #
##############################################################
# EITHER......................................................
# Choose region from:
# 1.  Northland               9.  Greater Wellington
# 2.  Auckland                10. Tasman
# 3.  Waikato                 11. Marlborough
# 4.  Bay of Plenty           12. West Coast
# 5.  East Cape               13. Canterbury
# 6.  Taranaki                14. Otag0
# 7.  Manawatu                15. Southland
# 8.  Hawke's Bay             16. ALL NZ
#And seclect a minimum stream order (from 1 to 8) (Recommend not having smaller than 4 for whole country)
##############################################################
pick <- MakePick(MyREC=MyREC,MinOrder=3,Region=16)
##############################################################
# OR.........................................................
# select by a downstream locaiton
Pt<-11018916  #This is the outlet
pick<-c(Pt,FindCatchment(Pt,MyREC))
MyREC<-MyREC[match(pick, MyREC$NZReach),]
MinQ_sel<-as.double(c(0.7,0.9))           #Define minimum flows (as a proportion of MALF)
AllocQ_sel<-as.double(c(0.5,1.0))       #Define Allocation volumes (as a proportion of MALF)
TakeAll<-0
RunOne=function(MyREC=MyREC,AllocQ=AllocQ,MinQ=MinQ,pick=pick,LandManagement="Fair",IrrigableAreaTarget=100,PropIrri=1,TakeAll=TakeAll){
MyREC1<-Run_FlowandAbstraction(MyREC=MyREC,AllocQ=AllocQ,MinQ=MinQ,pick=pick,TakeAll=TakeAll)
MyREC1<-Run_WQandPeri(MyREC=MyREC1,LandManagement=LandManagement,IrrigableAreaTarget=IrrigableAreaTarget,AllocQ=AllocQ,PropIrri=PropIrri)
MyREC1<-Run_HabitatFunctions(MyREC=MyREC1,MinQ=MinQ)
return(MyREC1)
}
ManageScenarios<-expand.grid(AllocQ_sel,MinQ_sel)
names(ManageScenarios)<-c("AllocQ","MinQ")
LandManagement<-c("Fair")  #"Good", "Fair" or "Poor"
REC_OUT<-list()
for (i in 1:length(ManageScenarios[,1])){
print(paste("########## SCENARIO ",i," ############",sep=""))
REC_OUT[[i]]<-RunOne(MyREC=MyREC,AllocQ=ManageScenarios[i,1],MinQ=ManageScenarios[i,2],pick=pick,LandManagement=LandManagement,IrrigableAreaTarget=100,PropIrri=1,TakeAll=TakeAll)
}
sel_sc<-c(1,2,3)
MakePlots(MyREC1=REC_OUT[[sel_sc[1]]],MyREC2=REC_OUT[[sel_sc[2]]],MyREC3=REC_OUT[[sel_sc[3]]],Indicator=8,PlotType=1,Scenarios=sel_sc)
MakePlots(MyREC1=REC_OUT[[sel_sc[1]]],MyREC2=REC_OUT[[sel_sc[2]]],MyREC3=REC_OUT[[sel_sc[3]]],Indicator=10,PlotType=1,Scenarios=sel_sc)
MakePlots(MyREC1=REC_OUT[[sel_sc[1]]],MyREC2=REC_OUT[[sel_sc[2]]],MyREC3=REC_OUT[[sel_sc[3]]],Indicator=10,PlotType=2,Scenarios=sel_sc)
MakePlots(MyREC1=REC_OUT[[sel_sc[1]]],MyREC2=REC_OUT[[sel_sc[2]]],MyREC3=REC_OUT[[sel_sc[3]]],Indicator=2,PlotType=1,Scenarios=sel_sc)
ManageScenarios
ManageScenarios<-ManageScenarios[1:3,]
ManageScenarios
ManageScenarios[3,1]<-1.5
ManageScenarios[2,2]<-0.8
ManageScenarios
ManageScenarios[3,2]<-0.7
ManageScenarios[1,2]<-0.9
ManageScenarios
REC_OUT<-list()
for (i in 1:length(ManageScenarios[,1])){
print(paste("########## SCENARIO ",i," ############",sep=""))
REC_OUT[[i]]<-RunOne(MyREC=MyREC,AllocQ=ManageScenarios[i,1],MinQ=ManageScenarios[i,2],pick=pick,LandManagement=LandManagement,IrrigableAreaTarget=100,PropIrri=1,TakeAll=TakeAll)
}
###############################################################################
sel_sc<-c(1,2,3)
MakePlots(MyREC1=REC_OUT[[sel_sc[1]]],MyREC2=REC_OUT[[sel_sc[2]]],MyREC3=REC_OUT[[sel_sc[3]]],Indicator=2,PlotType=1,Scenarios=sel_sc)
MakePlots(MyREC1=REC_OUT[[sel_sc[1]]],MyREC2=REC_OUT[[sel_sc[2]]],MyREC3=REC_OUT[[sel_sc[3]]],Indicator=2,PlotType=2,Scenarios=sel_sc)
MakePlots(MyREC1=REC_OUT[[sel_sc[1]]],MyREC2=REC_OUT[[sel_sc[2]]],MyREC3=REC_OUT[[sel_sc[3]]],Indicator=2,PlotType=3,Scenarios=sel_sc)
MyParlims<-list()
MyParlims[[1]]<-c(0,1,2,6,8)            #   1.  The total abstraction for irrigation (m3/s)
MyParlims[[2]]<-c(100,30,20,10,0)       #   2.  The percentage of time abstraction is stopped due to minimum flows (%)
MyParlims[[3]]<-c(100,35,15,10,0)       #   3.  The percentage of time abstraciton is restricted due to management flows (%)
MyParlims[[4]]<-c(0,85,90,95,100)        #   4.  The reliability of the take (% of total demand taken)
MyParlims[[5]]<-c(-1,0,0.5,0.8,1)*100     #   5.  The fraction of the upstream irrigable area irrigated\
MyParlims[[6]]<-c(0,0.5,0.7,0.8,1)      #   6.  The fraction of the allocated water used
MyParlims[[7]]<-c(0.2,1.0,1.6,2.5,4.5)  #   7.  Clarity
MyParlims[[8]]<-c(70,86,105,106,110)    #   8.  MCI
MyParlims[[9]]<-c(-50, -40, -20, -10,0)   #   9.  Reduction in River Width
MyParlims[[10]]<-c(50, 30, 15, 10, 0)      #   10.  Periphyton mean filaments
MyParlims[[11]]<-c(50, 30, 20, 10, 0)   #   11.  Periphyton max filaments
MyParlims[[12]]<-c(30, 15, 10, 5, 0)    #   12.  Periphyton mean mats
MyParlims[[13]]<-c(60, 40, 30, 10, 0)   #   13.  Periphyton max mats
MyParlims[[14]]<-c(0, 80, 85, 95, 250) #   14.  Percentage of baseline habitat (Long fin eel) maintained
MyParlims[[15]]<-c(0, 80, 85, 95, 250) #   15.  Percentage of baseline habitat (short fine eel) maintaine
MyParlims[[16]]<-c(0, 80, 85, 95, 250) #   16.  Percentage of baseline habitat (brown trout) maintained
MyParlims[[17]]<-c(0, 90, 95, 120, 250) #   17.  Percentage of baseline habitat (BlueGillBully) maintained
MyParlims[[18]]<-c(0, 90, 95, 120, 250) #   17.  Percentage of baseline habitat (inanaga) maintained
MyParlims[[19]]<-c(0, 90, 95, 120, 250) #   17.  Percentage of baseline habitat (torrent fish) maintained
MyParlims[[20]]<-c(0, 90, 95, 120, 250) #   17.  Percentage of baseline habitat (Kokopu) maintained
#Select the indices of the indicators to include in the water wheel
INDICATORsel<-c(4,5,9,10,14,16) #USE THIS FOR THE TABLE OF ALL OF THE INDICATORS FOR ALL OF THE SCENARIOS
WheelLayout<-c(1,3,0,1)       #number of rows (1) and columns (2).  NOTE: must be at least (no. scenarios +1) positions
# and (3) is whether to include full text labels [1] or number and legend [0]
sc_sel<-c(1:3)   #USE THIS TO GET A TABLE OF ALL OF THE INDICATORS FOR ALL OF THE SCENARIOS AND TO MAKE INPUTS FOR DECISION SPACE DIAGRAMS
#Determine the subcatchments
UPSTind<-c(1,0.95,1)          #1st value is switch to decide whether to do local [0] or catchment analysis [1].
#2nd value is only used for catchment analysis and is the accpetable fraction of exceedance
#Third value is a switch, to either calculate over whole set (0) or subset affected by change (1)
MyPoint<-Pt
MyOutComes<-MultiWheel_Kaituna(REC_OUT=REC_OUT,sc_sel=sc_sel,Parlims=MyParlims,INDICATORsel=INDICATORsel,Point=MyPoint,MinQ=ManageScenarios$MinQ,AllocQ=ManageScenarios$AllocQ,LandManagement="Fair",UPSTind=UPSTind,WheelLayout=WheelLayout,CatchSel=pick,p_on=0)
MyOutComes
MyOutComes<-MultiWheel_Kaituna(REC_OUT=REC_OUT,sc_sel=sc_sel,Parlims=MyParlims,INDICATORsel=INDICATORsel,Point=MyPoint,MinQ=ManageScenarios$MinQ,AllocQ=ManageScenarios$AllocQ,LandManagement="Fair",UPSTind=UPSTind,WheelLayout=WheelLayout,CatchSel=pick,p_on=1)
